C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\firebase_options.dart
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDXYAKkeh34b1NCnziNnb2P0sNSaeSgLBM',
    appId: '1:78950313539:web:11c03a35f2ed46fd23eef6',
    messagingSenderId: '78950313539',
    projectId: 'testdb-9897c',
    authDomain: 'testdb-9897c.firebaseapp.com',
    storageBucket: 'testdb-9897c.appspot.com',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDzWMI1GwJIuEEfkCONrvJjlYNDr0SHjXc',
    appId: '1:78950313539:android:1c1579462b5eff5323eef6',
    messagingSenderId: '78950313539',
    projectId: 'testdb-9897c',
    storageBucket: 'testdb-9897c.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyDbYoSNwsnndMvy5xjNXKp1-YLpJjFQISQ',
    appId: '1:78950313539:ios:0c7964362b6f5a8323eef6',
    messagingSenderId: '78950313539',
    projectId: 'testdb-9897c',
    storageBucket: 'testdb-9897c.appspot.com',
    iosBundleId: 'com.example.shiftManager',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyDbYoSNwsnndMvy5xjNXKp1-YLpJjFQISQ',
    appId: '1:78950313539:ios:0c7964362b6f5a8323eef6',
    messagingSenderId: '78950313539',
    projectId: 'testdb-9897c',
    storageBucket: 'testdb-9897c.appspot.com',
    iosBundleId: 'com.example.shiftManager',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyDYqhlOB9WXXJp_U6dRQWRdQtZPk-0naWM',
    appId: '1:78950313539:web:6dc1ae7cca0e488923eef6',
    messagingSenderId: '78950313539',
    projectId: 'testdb-9897c',
    authDomain: 'testdb-9897c.firebaseapp.com',
    storageBucket: 'testdb-9897c.appspot.com',
  );
}



C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart';
import 'providers/shift_provider.dart';
import 'providers/employee_provider.dart';
import 'providers/team_provider.dart';
import 'services/auth_service.dart';
import 'screens/calendar_page.dart';
import 'screens/login_screen.dart';  // Add this import
import 'firebase_options.dart';
import 'utils/app_theme.dart';
import 'providers/theme_provider.dart';
import 'screens/home_page.dart'; // {{ Added import for HomePage }}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthService()),
        ChangeNotifierProvider(create: (_) => ShiftProvider()),
        ChangeNotifierProvider(create: (_) => EmployeeProvider()),
        ChangeNotifierProvider(create: (_) => TeamProvider()),
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
      ],
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeProvider>(
      builder: (context, themeProvider, child) {
        return MaterialApp(
          title: 'Shift Scheduler',
          theme: AppTheme.lightTheme,  // Change this line
          darkTheme: AppTheme.darkTheme,
          themeMode: themeProvider.themeMode,
          home: AuthWrapper(),
        );
      },
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    return Consumer<AuthService>(
      builder: (context, authService, _) {
        return StreamBuilder(
          stream: authService.authStateChanges,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.active) {
              final user = snapshot.data;
              if (user == null) {
                return const LoginScreen();
              }
              return const HomePage(); // Change this line
            }
            return const Scaffold(body: Center(child: CircularProgressIndicator()));
          },
        );
      },
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\models\employee.dart

class Employee {
  final String id;
  final String name;
  final String position;
  final String? teamId;
  final String email;
  final String phoneNumber;

  Employee({
    required this.id,
    required this.name,
    required this.position,
    this.teamId,
    required this.email,
    required this.phoneNumber,
  });

  factory Employee.fromJson(Map<String, dynamic> json) {
    return Employee(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      position: json['position'] ?? '',
      teamId: json['teamId'],
      email: json['email'] ?? '',
      phoneNumber: json['phoneNumber'] ?? '',
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'position': position,
      'teamId': teamId,
      'email': email,
      'phoneNumber': phoneNumber,
    };
  }

  Employee copyWith({
    String? id,
    String? name,
    String? position,
    String? teamId,
    String? email,
    String? phoneNumber,
  }) {
    return Employee(
      id: id ?? this.id,
      name: name ?? this.name,
      position: position ?? this.position,
      teamId: teamId ?? this.teamId,
      email: email ?? this.email,
      phoneNumber: phoneNumber ?? this.phoneNumber,
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\models\shift_period.dart
import 'package:flutter/material.dart';

class ShiftPeriod {
  String? id;
  String name;
  TimeOfDay startTime;
  TimeOfDay endTime;
  Color color;
  String teamId;

  ShiftPeriod({
    this.id,
    required this.name,
    required this.startTime,
    required this.endTime,
    required this.color,
    required this.teamId,
  });

  factory ShiftPeriod.fromMap(Map<String, dynamic> map, String id) {
    return ShiftPeriod(
      id: id,
      name: map['name'] ?? '',
      startTime: TimeOfDay(
        hour: map['startHour'] ?? 0,
        minute: map['startMinute'] ?? 0,
      ),
      endTime: TimeOfDay(
        hour: map['endHour'] ?? 0,
        minute: map['endMinute'] ?? 0,
      ),
      color: Color(map['color'] ?? 0xFF000000),
      teamId: map['teamId'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'startHour': startTime.hour,
      'startMinute': startTime.minute,
      'endHour': endTime.hour,
      'endMinute': endTime.minute,
      'color': color.value,
      'teamId': teamId,
    };
  }

  ShiftPeriod copyWith({
    String? id,
    String? name,
    TimeOfDay? startTime,
    TimeOfDay? endTime,
    Color? color,
    String? teamId,
  }) {
    return ShiftPeriod(
      id: id ?? this.id,
      name: name ?? this.name,
      startTime: startTime ?? this.startTime,
      endTime: endTime ?? this.endTime,
      color: color ?? this.color,
      teamId: teamId ?? this.teamId,
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\models\shift.dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class Shift {
  String? id;
  DateTime date;
  String title;
  TimeOfDay startTime;
  TimeOfDay endTime;
  String employeeId;
  String shiftPeriodId;

  Shift({
    this.id,
    required this.date,
    required this.title,
    required this.startTime,
    required this.endTime,
    required this.employeeId,
    required this.shiftPeriodId,
  });

  factory Shift.fromMap(Map<String, dynamic> map, String id) {
    return Shift(
      id: id,
      date: (map['date'] as Timestamp).toDate(),
      title: map['title'] ?? '',
      startTime: TimeOfDay.fromDateTime((map['startTime'] as Timestamp).toDate()),
      endTime: TimeOfDay.fromDateTime((map['endTime'] as Timestamp).toDate()),
      employeeId: map['employeeId'] ?? '',
      shiftPeriodId: map['shiftPeriodId'] ?? '',
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'date': Timestamp.fromDate(date),
      'title': title,
      'startTime': Timestamp.fromDate(DateTime(date.year, date.month, date.day, startTime.hour, startTime.minute)),
      'endTime': Timestamp.fromDate(DateTime(date.year, date.month, date.day, endTime.hour, endTime.minute)),
      'employeeId': employeeId,
      'shiftPeriodId': shiftPeriodId,
    };
  }

  Shift copyWith({
    String? id,
    DateTime? date,
    String? title,
    TimeOfDay? startTime,
    TimeOfDay? endTime,
    String? employeeId,
    String? shiftPeriodId,
  }) {
    return Shift(
      id: id ?? this.id,
      date: date ?? this.date,
      title: title ?? this.title,
      startTime: startTime ?? this.startTime,
      endTime: endTime ?? this.endTime,
      employeeId: employeeId ?? this.employeeId,
      shiftPeriodId: shiftPeriodId ?? this.shiftPeriodId,
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\models\team.dart
class Team {
  final String id;
  final String name;
  final String description;
  final List<String> employeeIds;
  final String? managerId;

  Team({
    required this.id,
    required this.name,
    required this.description,
    required this.employeeIds,
    this.managerId,
  });

  factory Team.fromJson(Map<String, dynamic> json) {
    return Team(
      id: json['id'] ?? '',
      name: json['name'] ?? '',
      description: json['description'] ?? '',
      employeeIds: List<String>.from(json['employeeIds'] ?? []),
      managerId: json['managerId'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'employeeIds': employeeIds,
      'managerId': managerId,
    };
  }

  Team copyWith({
    String? id,
    String? name,
    String? description,
    List<String>? employeeIds,
    String? managerId,
  }) {
    return Team(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      employeeIds: employeeIds ?? this.employeeIds,
      managerId: managerId ?? this.managerId,
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\providers\employee_provider.dart
import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/employee.dart';
import '../utils/error_handler.dart';

class EmployeeProvider with ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  List<Employee> _employees = [];
  bool _isLoading = false;

  List<Employee> get employees => _employees;
  bool get isLoading => _isLoading;

  Future<void> fetchEmployees() async {
    _isLoading = true;
    notifyListeners();

    try {
      final QuerySnapshot snapshot = await _firestore.collection('employees').get();
      _employees = snapshot.docs.map((doc) {
        Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
        return Employee.fromJson({...data, 'id': doc.id});
      }).toList();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addEmployee(Employee employee) async {
    try {
      final docRef = await _firestore.collection('employees').add(employee.toJson());
      final newEmployee = employee.copyWith(id: docRef.id);
      _employees.add(newEmployee);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> updateEmployee(Employee employee) async {
    try {
      await _firestore.collection('employees').doc(employee.id).update(employee.toJson());
      final index = _employees.indexWhere((e) => e.id == employee.id);
      if (index != -1) {
        _employees[index] = employee;
        notifyListeners();
      }
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> deleteEmployee(Employee employee) async {
    try {
      await _firestore.collection('employees').doc(employee.id).delete();
      _employees.removeWhere((e) => e.id == employee.id);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Employee? getEmployeeById(String id) {
    return _employees.firstWhere(
      (employee) => employee.id == id,
      orElse: () => Employee(id: '', name: 'Unknown', position: '', email: '', phoneNumber: ''),
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\providers\shift_provider.dart
import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/shift.dart';
import '../models/shift_period.dart';
import '../utils/error_handler.dart';

class ShiftProvider with ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Map<DateTime, List<Shift>> _shifts = {};
  List<ShiftPeriod> _shiftPeriods = [];
  bool _isLoading = false;

  Map<DateTime, List<Shift>> get shifts => _shifts;
  List<ShiftPeriod> get shiftPeriods => _shiftPeriods;
  bool get isLoading => _isLoading;

  Future<void> fetchShiftPeriods() async {
    _isLoading = true;
    notifyListeners();

    try {
      final QuerySnapshot snapshot = await _firestore.collection('shiftPeriods').get();
      _shiftPeriods = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        return ShiftPeriod.fromMap(data, doc.id);
      }).toList();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addShiftPeriod(ShiftPeriod period) async {
    try {
      final docRef = await _firestore.collection('shiftPeriods').add(period.toMap());
      period.id = docRef.id;
      _shiftPeriods.add(period);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> updateShiftPeriod(ShiftPeriod period) async {
    try {
      await _firestore.collection('shiftPeriods').doc(period.id).update(period.toMap());
      final index = _shiftPeriods.indexWhere((p) => p.id == period.id);
      if (index != -1) {
        _shiftPeriods[index] = period;
        notifyListeners();
      }
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> deleteShiftPeriod(String id) async {
    try {
      await _firestore.collection('shiftPeriods').doc(id).delete();
      _shiftPeriods.removeWhere((p) => p.id == id);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> fetchShifts(DateTime month) async {
    _isLoading = true;
    notifyListeners();

    try {
      final startOfMonth = DateTime(month.year, month.month, 1);
      final endOfMonth = DateTime(month.year, month.month + 1, 0);

      final QuerySnapshot snapshot = await _firestore
          .collection('shifts')
          .where('date', isGreaterThanOrEqualTo: startOfMonth)
          .where('date', isLessThanOrEqualTo: endOfMonth)
          .get();

      _shifts.clear();
      for (var doc in snapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;
        final shift = Shift.fromMap(data, doc.id);
        final shiftDate = DateTime(shift.date.year, shift.date.month, shift.date.day);
        if (_shifts[shiftDate] == null) {
          _shifts[shiftDate] = [];
        }
        _shifts[shiftDate]!.add(shift);
      }
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<Shift> addShift(Shift shift) async {
    try {
      final docRef = await _firestore.collection('shifts').add(shift.toMap());
      shift.id = docRef.id;
      if (_shifts[shift.date] == null) {
        _shifts[shift.date] = [];
      }
      _shifts[shift.date]!.add(shift);
      notifyListeners();
      return shift;
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
      rethrow;
    }
  }

  Future<void> updateShift(Shift shift) async {
    try {
      await _firestore.collection('shifts').doc(shift.id).update(shift.toMap());
      final index = _shifts[shift.date]!.indexWhere((s) => s.id == shift.id);
      _shifts[shift.date]![index] = shift;
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> deleteShift(Shift shift) async {
    try {
      await _firestore.collection('shifts').doc(shift.id).delete();
      _shifts[shift.date]!.removeWhere((s) => s.id == shift.id);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> fetchEmployeeShifts(String employeeId, DateTime month) async {
    _isLoading = true;
    notifyListeners();

    try {
      final startOfMonth = DateTime(month.year, month.month, 1);
      final endOfMonth = DateTime(month.year, month.month + 1, 0);

      final QuerySnapshot snapshot = await _firestore
          .collection('shifts')
          .where('employeeId', isEqualTo: employeeId)
          .where('date', isGreaterThanOrEqualTo: startOfMonth)
          .where('date', isLessThanOrEqualTo: endOfMonth)
          .get();

      _shifts.clear();
      for (var doc in snapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;
        final shift = Shift.fromMap(data, doc.id);
        final shiftDate = DateTime(shift.date.year, shift.date.month, shift.date.day);
        if (_shifts[shiftDate] == null) {
          _shifts[shiftDate] = [];
        }
        _shifts[shiftDate]!.add(shift);
      }
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\providers\team_provider.dart
import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/team.dart';
import '../utils/error_handler.dart';

class TeamProvider with ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  List<Team> _teams = [];
  bool _isLoading = false;

  List<Team> get teams => _teams;
  bool get isLoading => _isLoading;

  Future<void> fetchTeams() async {
    _isLoading = true;
    notifyListeners();

    try {
      final QuerySnapshot snapshot = await _firestore.collection('teams').get();
      _teams = snapshot.docs.map((doc) {
        Map<String, dynamic> data = doc.data() as Map<String, dynamic>;
        return Team.fromJson({...data, 'id': doc.id});
      }).toList();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> addTeam(Team team) async {
    try {
      final docRef = await _firestore.collection('teams').add(team.toJson());
      final newTeam = team.copyWith(id: docRef.id);
      _teams.add(newTeam);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> updateTeam(Team team) async {
    try {
      await _firestore.collection('teams').doc(team.id).update(team.toJson());
      final index = _teams.indexWhere((t) => t.id == team.id);
      if (index != -1) {
        _teams[index] = team;
        notifyListeners();
      }
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Future<void> deleteTeam(Team team) async {
    try {
      await _firestore.collection('teams').doc(team.id).delete();
      _teams.removeWhere((t) => t.id == team.id);
      notifyListeners();
    } catch (e) {
      ErrorHandler.handleFirestoreError(e);
    }
  }

  Team? getTeamById(String id) {
    return _teams.firstWhere(
      (team) => team.id == id,
      orElse: () => Team(id: '', name: 'Unknown', description: '', employeeIds: []),
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\providers\theme_provider.dart
import 'package:flutter/material.dart';
import '../utils/app_theme.dart';  // Add this import

class ThemeProvider with ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.system;

  ThemeMode get themeMode => _themeMode;

  // Add this method
  ThemeData getTheme() {
    return _themeMode == ThemeMode.dark ? AppTheme.darkTheme : AppTheme.lightTheme;
  }

  void toggleTheme() {
    _themeMode = _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
    notifyListeners();
  }

  void setThemeMode(ThemeMode mode) {
    _themeMode = mode;
    notifyListeners();
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\screens\calendar_page.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:table_calendar/table_calendar.dart';
import 'package:fl_chart/fl_chart.dart';
import '../providers/shift_provider.dart';
import '../providers/employee_provider.dart';
import '../providers/team_provider.dart';
import '../models/shift.dart';
import '../models/shift_period.dart';
import '../widgets/shift_dialog.dart';
import '../services/auth_service.dart';
import 'shift_periods_page.dart';
import 'employee_management_page.dart';
import '../providers/theme_provider.dart';
import '../utils/app_theme.dart';

class CalendarPage extends StatefulWidget {
  const CalendarPage({super.key});

  @override
  _CalendarPageState createState() => _CalendarPageState();
}

class _CalendarPageState extends State<CalendarPage> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _focusedDay = DateTime.now();
  DateTime? _selectedDay;

  @override
  void initState() {
    super.initState();
    _selectedDay = _focusedDay;
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _fetchInitialData();
    });
  }

  void _fetchInitialData() {
    Provider.of<AuthService>(context, listen: false);
    final shiftProvider = Provider.of<ShiftProvider>(context, listen: false);
    final employeeProvider = Provider.of<EmployeeProvider>(context, listen: false);
    final teamProvider = Provider.of<TeamProvider>(context, listen: false);


    shiftProvider.fetchShiftPeriods();
    teamProvider.fetchTeams();
    employeeProvider.fetchEmployees();
    shiftProvider.fetchShifts(_focusedDay);
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<ShiftProvider>(
      builder: (context, shiftProvider, child) {
        if (shiftProvider.isLoading) {
          return const Center(child: CircularProgressIndicator(valueColor: AlwaysStoppedAnimation<Color>(AppTheme.primaryColor)));
        }
        return _buildCalendarContent(context);
      },
    );
  }

  Widget _buildCalendarContent(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        children: [
          _buildTableCalendar(),
          const SizedBox(height: 8),
          _buildShiftList(),
          const SizedBox(height: 16),
          _buildWeeklyShiftChart(),
          const SizedBox(height: 16),
          _buildEmployeeShiftDistribution(),
        ],
      ),
    );
  }

  Widget _buildTableCalendar() {
    return Consumer<ShiftProvider>(
      builder: (context, shiftProvider, child) {
        return TableCalendar(
          firstDay: DateTime.utc(2020, 1, 1),
          lastDay: DateTime.utc(2030, 12, 31),
          focusedDay: _focusedDay,
          calendarFormat: _calendarFormat,
          selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
          onDaySelected: (selectedDay, focusedDay ) {
            setState(() {
              _selectedDay = selectedDay;
              _focusedDay = focusedDay;
            });
          },
          onFormatChanged: (format) {
            if (_calendarFormat != format) {
              setState(() => _calendarFormat = format);
            }
          },
          onPageChanged: (focusedDay) {
            _focusedDay = focusedDay;
            shiftProvider.fetchShifts(focusedDay);
          },
          calendarBuilders: CalendarBuilders(
            defaultBuilder: (context, day, _) => _buildCalendarDayContainer(day, shiftProvider),
            selectedBuilder: (context, day, _) => _buildCalendarDayContainer(day, shiftProvider, isSelected: true),
            todayBuilder: (context, day, _) => _buildCalendarDayContainer(day, shiftProvider, isToday: true),
          ),
        );
      },
    );
  }

  Widget _buildCalendarDayContainer(DateTime day, ShiftProvider shiftProvider, {bool isSelected = false, bool isToday = false}) {
    final shifts = shiftProvider.shifts[DateTime(day.year, day.month, day.day)] ?? [];
    Color backgroundColor = Colors.transparent;

    if (shifts.isNotEmpty) {
      final shift = shifts.first;
      final shiftPeriod = shiftProvider.shiftPeriods.firstWhere(
        (period) => period.id == shift.shiftPeriodId,
        orElse: () => ShiftPeriod(name: '', startTime: TimeOfDay.now(), endTime: TimeOfDay.now(), color: Colors.grey, teamId: ''),
      );
      backgroundColor = shiftPeriod.color.withOpacity(0.3);
    }

    return Container(
      margin: const EdgeInsets.all(4.0),
      padding: const EdgeInsets.all(5.0),
      decoration: BoxDecoration(
        color: backgroundColor,
        border: Border.all(
          color: isSelected ? AppTheme.primaryColor : (isToday ? AppTheme.accentColor : Colors.transparent),
          width: 1.5,
        ),
        borderRadius: BorderRadius.circular(4.0),
      ),
      child: Center(
        child: Text(
          '${day.day}',
          style: TextStyle(
            color: isSelected || isToday ? AppTheme.primaryColor : null,
            fontWeight: FontWeight.w400,
          ),
        ),
      ),
    );
  }

  Widget _buildShiftList() {
    return Consumer2<ShiftProvider, EmployeeProvider>(
      builder: (context, shiftProvider, employeeProvider, child) {
        if (_selectedDay == null) return Container();

        final selectedShifts = shiftProvider.shifts[DateTime(_selectedDay!.year, _selectedDay!.month, _selectedDay!.day)] ?? [];
        if (selectedShifts.isEmpty) {
          return const Center(child: Text('No shifts scheduled for this day'));
        }

        return ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: selectedShifts.length,
          itemBuilder: (context, index) {
            final shift = selectedShifts[index];
            final employee = employeeProvider.getEmployeeById(shift.employeeId);
            return ListTile(
              title: Text(shift.title),
              subtitle: Text('${shift.startTime.format(context)} - ${shift.endTime.format(context)}'),
              trailing: Text(employee?.name ?? 'Unknown Employee'),
              onTap: () => _editShift(context, shift),
              onLongPress: () => _deleteShift(context, shift),
            );
          },
        );
      },
    );
  }

  void _addShift(BuildContext context) {
    Provider.of<EmployeeProvider>(context, listen: false);

    showDialog(
      context: context,
      builder: (context) => ShiftDialog(
        shiftPeriods: Provider.of<ShiftProvider>(context, listen: false).shiftPeriods,
        onSave: (title, startTime, endTime, employeeId, shiftPeriodId) async {
          final shift = Shift(
            date: _selectedDay!,
            title: title,
            startTime: startTime,
            endTime: endTime,
            employeeId: employeeId,
            shiftPeriodId: shiftPeriodId,
          );
          await Provider.of<ShiftProvider>(context, listen: false).addShift(shift);
        },
      ),
    );
  }

  void _editShift(BuildContext context, Shift shift) {
    showDialog(
      context: context,
      builder: (context) => ShiftDialog(
        shift: shift,
        shiftPeriods: Provider.of<ShiftProvider>(context, listen: false).shiftPeriods,
        onSave: (title, startTime, endTime, employeeId, shiftPeriodId) async {
          final updatedShift = Shift(
            id: shift.id,
            date: shift.date,
            title: title,
            startTime: startTime,
            endTime: endTime,
            employeeId: employeeId,
            shiftPeriodId: shiftPeriodId,
          );
          await Provider.of<ShiftProvider>(context, listen: false).updateShift(updatedShift);
        },
      ),
    );
  }

  void _deleteShift(BuildContext context, Shift shift) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Shift'),
        content: const Text('Are you sure you want to delete this shift?'),
        actions: [
          TextButton(
            child: const Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: const Text('Delete'),
            onPressed: () async {
              await Provider.of<ShiftProvider>(context, listen: false).deleteShift(shift);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }

  Widget _buildWeeklyShiftChart() {
    return Consumer<ShiftProvider>(
      builder: (context, shiftProvider, child) {
        final weekStart = _focusedDay.subtract(Duration(days: _focusedDay.weekday - 1));
        final weekShifts = List.generate(7, (index) {
          final day = weekStart.add(Duration(days: index));
          return shiftProvider.shifts[day]?.length ?? 0;
        });

        return Container(
          height: 200,
          padding: const EdgeInsets.all(16),
          child: BarChart(
            BarChartData(
              alignment: BarChartAlignment.spaceAround,
              maxY: weekShifts.reduce((a, b) => a > b ? a : b).toDouble(),
              titlesData: FlTitlesData(
                show: true,
                bottomTitles: AxisTitles(
                  sideTitles: SideTitles(
                    showTitles: true,
                    getTitlesWidget: (value, meta) {
                      const days = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];
                      return Text(days[value.toInt()]);
                    },
                    reservedSize: 30,
                  ),
                ),
                leftTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
                topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
                rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
              ),
              borderData: FlBorderData(show: false),
              barGroups: List.generate(7, (index) {
                return BarChartGroupData(
                  x: index,
                  barRods: [BarChartRodData(toY: weekShifts[index].toDouble())],
                );
              }),
            ),
          ),
        );
      },
    );
  }

  Widget _buildEmployeeShiftDistribution() {
    return Consumer2<ShiftProvider, EmployeeProvider>(
      builder: (context, shiftProvider, employeeProvider, child) {
        final employeeShiftCounts = <String, int>{};
        shiftProvider.shifts.values.expand((shifts) => shifts).forEach((shift) {
          employeeShiftCounts[shift.employeeId] = (employeeShiftCounts[shift.employeeId] ?? 0) + 1;
        });

        final totalShifts = employeeShiftCounts.values.fold(0, (sum, count) => sum + count);

        return Container(
          height: 300,
          padding: const EdgeInsets.all(16),
          child: Column(
            children: [
              const Text('Employee Shift Distribution', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              const SizedBox(height: 8),
              Expanded(
                child: PieChart(
                  PieChartData(
                    sections: employeeShiftCounts.entries.map((entry) {
                      employeeProvider.getEmployeeById(entry.key);
                      return PieChartSectionData(
                        color: Colors.primaries[entry.key.hashCode % Colors.primaries.length],
                        value: entry.value.toDouble(),
                        title: '${(entry.value / totalShifts * 100).toStringAsFixed(1)}%',
                        radius: 50,
                        titleStyle: const TextStyle(fontSize: 12, fontWeight: FontWeight.bold, color: Colors.white),
                      );
                    }).toList(),
                  ),
                ),
              ),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 4,
                children: employeeShiftCounts.entries.map((entry) {
                  final employee = employeeProvider.getEmployeeById(entry.key);
                  return Chip(
                    label: Text(employee?.name ?? 'Unknown'),
                    backgroundColor: Colors.primaries[entry.key.hashCode % Colors.primaries.length].withOpacity(0.3),
                  );
                }).toList(),
              ),
            ],
          ),
        );
      },
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\screens\employee_management_page.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/employee_provider.dart';
import '../models/employee.dart';
import '../widgets/employee_dialog.dart';

class EmployeeManagementPage extends StatelessWidget {
  const EmployeeManagementPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Employee Management')),
      body: Consumer<EmployeeProvider>(
        builder: (context, employeeProvider, child) {
          if (employeeProvider.isLoading) {
            return const Center(child: CircularProgressIndicator());
          }
          return ListView.builder(
            itemCount: employeeProvider.employees.length,
            itemBuilder: (context, index) {
              final employee = employeeProvider.employees[index];
              return ListTile(
                title: Text(employee.name),
                subtitle: Text(employee.position),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    IconButton(
                      icon: const Icon(Icons.edit),
                      onPressed: () => _editEmployee(context, employeeProvider, employee),
                    ),
                    IconButton(
                      icon: const Icon(Icons.delete),
                      onPressed: () => _deleteEmployee(context, employeeProvider, employee),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.add),
        onPressed: () => _addEmployee(context),
      ),
    );
  }

  void _addEmployee(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => EmployeeDialog(
        onSave: (Employee newEmployee) {
          Provider.of<EmployeeProvider>(context, listen: false).addEmployee(newEmployee);
        },
      ),
    );
  }

  void _editEmployee(BuildContext context, EmployeeProvider provider, Employee employee) {
    showDialog(
      context: context,
      builder: (context) => EmployeeDialog(
        employee: employee,
        onSave: (Employee updatedEmployee) {
          provider.updateEmployee(updatedEmployee);
        },
      ),
    );
  }

  void _deleteEmployee(BuildContext context, EmployeeProvider provider, Employee employee) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Employee'),
        content: Text('Are you sure you want to delete ${employee.name}?'),
        actions: [
          TextButton(
            child: const Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: const Text('Delete'),
            onPressed: () {
              provider.deleteEmployee(employee);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\screens\home_page.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'calendar_page.dart';
import 'employee_management_page.dart';
import 'shift_periods_page.dart';
import '../providers/theme_provider.dart';
import '../utils/app_theme.dart';
import '../services/auth_service.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  int _currentIndex = 0;

  final List<Widget> _pages = [
    const CalendarPage(),
    const EmployeeManagementPage(),
    const ShiftPeriodsPage(),
  ];

  void _onTabTapped(int index) {
    setState(() {
      _currentIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Shift Scheduler', style: TextStyle(fontWeight: FontWeight.w300)),
        actions: [
          IconButton(
            icon: const Icon(Icons.brightness_6, color: AppTheme.primaryColor),
            onPressed: () {
              final themeProvider = Provider.of<ThemeProvider>(context, listen: false);
              themeProvider.toggleTheme();
            },
          ),
          IconButton(
            icon: const Icon(Icons.logout, color: AppTheme.primaryColor),
            onPressed: () async => await context.read<AuthService>().signOut(),
          ),
        ],
      ),
      body: _pages[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: _onTabTapped,
        selectedItemColor: AppTheme.primaryColor,
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.calendar_today),
            label: 'Calendar',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.people),
            label: 'Employees',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.schedule),
            label: 'Shift Periods',
          ),
        ],
      ),
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\screens\login_screen.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/auth_service.dart';
import '../utils/app_theme.dart';
import 'home_page.dart'; // Add this import

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';
  String _password = '';
  bool _isLoading = false;

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      setState(() => _isLoading = true);
      try {
        await context.read<AuthService>().signInWithEmailAndPassword(_email, _password);
        // After successful login, navigate to HomePage
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const HomePage()),
        );
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(e.toString())),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextFormField(
                decoration: const InputDecoration(labelText: 'Email'),
                validator: (value) => value!.isEmpty ? 'Please enter your email' : null,
                onSaved: (value) => _email = value!,
              ),
              const SizedBox(height: 16),
              TextFormField(
                decoration: const InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) => value!.isEmpty ? 'Please enter your password' : null,
                onSaved: (value) => _password = value!,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppTheme.primaryColor,
                  foregroundColor: AppTheme.accentColor,
                  minimumSize: const Size(double.infinity, 50),
                ),
                onPressed: _isLoading ? null : _submitForm,
                child: _isLoading
                    ? const CircularProgressIndicator(color: AppTheme.accentColor)
                    : const Text('Login'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\screens\shift_periods_page.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/shift_provider.dart';
import '../providers/team_provider.dart';
import '../models/shift_period.dart';
import '../widgets/shift_period_dialog.dart';

class ShiftPeriodsPage extends StatelessWidget {
  const ShiftPeriodsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Shift Periods')),
      body: Consumer2<ShiftProvider, TeamProvider>(
        builder: (context, shiftProvider, teamProvider, child) {
          if (shiftProvider.isLoading || teamProvider.isLoading) {
            return const Center(child: CircularProgressIndicator());
          }
          return ListView.builder(
            itemCount: shiftProvider.shiftPeriods.length,
            itemBuilder: (context, index) {
              final period = shiftProvider.shiftPeriods[index];
              final team = teamProvider.getTeamById(period.teamId);
              return ListTile(
                title: Text(period.name),
                subtitle: Text('${period.startTime.format(context)} - ${period.endTime.format(context)}\nTeam: ${team?.name ?? 'Unknown'}'),
                trailing: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Container(
                      width: 24,
                      height: 24,
                      decoration: BoxDecoration(
                        color: period.color,
                        shape: BoxShape.circle,
                      ),
                    ),
                    const SizedBox(width: 8),
                    IconButton(
                      icon: const Icon(Icons.edit),
                      onPressed: () => _editShiftPeriod(context, shiftProvider, teamProvider, period),
                    ),
                    IconButton(
                      icon: const Icon(Icons.delete),
                      onPressed: () => _deleteShiftPeriod(context, shiftProvider, period),
                    ),
                  ],
                ),
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.add),
        onPressed: () => _addShiftPeriod(context),
      ),
    );
  }

  void _addShiftPeriod(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => ShiftPeriodDialog(
        teams: Provider.of<TeamProvider>(context, listen: false).teams,
        onSave: (String name, TimeOfDay startTime, TimeOfDay endTime, Color color, String teamId) {
          final newPeriod = ShiftPeriod(
            name: name,
            startTime: startTime,
            endTime: endTime,
            color: color,
            teamId: teamId,
          );
          Provider.of<ShiftProvider>(context, listen: false).addShiftPeriod(newPeriod);
        },
      ),
    );
  }

  void _editShiftPeriod(BuildContext context, ShiftProvider provider, TeamProvider teamProvider, ShiftPeriod period) {
    showDialog(
      context: context,
      builder: (context) => ShiftPeriodDialog(
        shiftPeriod: period,
        teams: teamProvider.teams,
        onSave: (String name, TimeOfDay startTime, TimeOfDay endTime, Color color, String teamId) {
          final updatedPeriod = ShiftPeriod(
            id: period.id,
            name: name,
            startTime: startTime,
            endTime: endTime,
            color: color,
            teamId: teamId,
          );
          provider.updateShiftPeriod(updatedPeriod);
        },
      ),
    );
  }

  void _deleteShiftPeriod(BuildContext context, ShiftProvider provider, ShiftPeriod period) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Shift Period'),
        content: const Text('Are you sure you want to delete this shift period?'),
        actions: [
          TextButton(
            child: const Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: const Text('Delete'),
            onPressed: () {
              provider.deleteShiftPeriod(period.id!);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\services\auth_service.dart
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/employee.dart';
import '../utils/error_handler.dart';

class AuthService with ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? get currentUser => _auth.currentUser;

  Stream<User?> get authStateChanges => _auth.authStateChanges();

  Future<void> signInWithEmailAndPassword(String email, String password) async {
    try {
      await _auth.signInWithEmailAndPassword(email: email, password: password);
      await _checkAndCreateEmployeeDocument();
      notifyListeners();
    } on FirebaseAuthException catch (e) {
      throw ErrorHandler.handleAuthError(e);
    }
  }

  Future<void> createUserWithEmailAndPassword(String email, String password, String name, String position) async {
    try {
      final UserCredential userCredential = await _auth.createUserWithEmailAndPassword(email: email, password: password);
      await _createEmployeeDocument(userCredential.user!.uid, email, name, position);
      notifyListeners();
    } on FirebaseAuthException catch (e) {
      throw ErrorHandler.handleAuthError(e);
    }
  }

  Future<void> signInWithPhoneNumber(String phoneNumber) async {
    try {
      await _auth.verifyPhoneNumber(
        phoneNumber: phoneNumber,
        verificationCompleted: (PhoneAuthCredential credential) async {
          await _auth.signInWithCredential(credential);
          await _checkAndCreateEmployeeDocument();
          notifyListeners();
        },
        verificationFailed: (FirebaseAuthException e) {
          throw ErrorHandler.handleAuthError(e);
        },
        codeSent: (String verificationId, int? resendToken) {
          // Implement code sent handling in the UI
        },
        codeAutoRetrievalTimeout: (String verificationId) {
          // Implement timeout handling in the UI
        },
      );
    } catch (e) {
      throw ErrorHandler.handleGeneralError(e);
    }
  }

  Future<void> _checkAndCreateEmployeeDocument() async {
    final User? user = _auth.currentUser;
    if (user != null) {
      final docSnapshot = await _firestore.collection('employees').doc(user.uid).get();
      if (!docSnapshot.exists) {
        await _createEmployeeDocument(user.uid, user.email ?? '', 'New Employee', 'Unassigned');
      }
    }
  }

  Future<void> _createEmployeeDocument(String uid, String email, String name, String position) async {
    final employee = Employee(
      id: uid,
      name: name,
      position: position,
      email: email,
      phoneNumber: _auth.currentUser?.phoneNumber ?? '',
    );
    await _firestore.collection('employees').doc(uid).set(employee.toJson());
  }

  Future<void> signOut() async {
    await _auth.signOut();
    notifyListeners();
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\utils\app_theme.dart
import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryColor = Color(0xFFFF0000); // Nothing Red
  static const Color accentColor = Color(0xFFFFFFFF); // White

  static const Color _backgroundColor = Color(0xFFF5F5F5);
  static const Color _surfaceColor = Color(0xFFFFFFFF);
  static const Color _errorColor = Color(0xFFCF6679);

  static final ThemeData lightTheme = ThemeData(
    primaryColor: primaryColor,
    colorScheme: const ColorScheme.light(
      primary: primaryColor,
      secondary: accentColor,
      surface: _surfaceColor,
      error: _errorColor,
    ),
    scaffoldBackgroundColor: _backgroundColor,
    appBarTheme: const AppBarTheme(
      color: _surfaceColor,
      elevation: 0,
      iconTheme: IconThemeData(color: primaryColor),
      titleTextStyle: TextStyle(color: primaryColor, fontSize: 20, fontWeight: FontWeight.w500),
    ),
    iconTheme: const IconThemeData(color: primaryColor),
    textTheme: TextTheme(
      displayLarge: const TextStyle(color: primaryColor, fontSize: 96, fontWeight: FontWeight.w300),
      displayMedium: const TextStyle(color: primaryColor, fontSize: 60, fontWeight: FontWeight.w300),
      displaySmall: const TextStyle(color: primaryColor, fontSize: 48, fontWeight: FontWeight.w400),
      headlineMedium: const TextStyle(color: primaryColor, fontSize: 34, fontWeight: FontWeight.w400),
      headlineSmall: const TextStyle(color: primaryColor, fontSize: 24, fontWeight: FontWeight.w400),
      titleLarge: const TextStyle(color: primaryColor, fontSize: 20, fontWeight: FontWeight.w500),
      titleMedium: const TextStyle(color: primaryColor, fontSize: 16, fontWeight: FontWeight.w400),
      titleSmall: const TextStyle(color: primaryColor, fontSize: 14, fontWeight: FontWeight.w500),
      bodyLarge: const TextStyle(color: primaryColor, fontSize: 16, fontWeight: FontWeight.w400),
      bodyMedium: const TextStyle(color: primaryColor, fontSize: 14, fontWeight: FontWeight.w400),
      labelLarge: const TextStyle(color: accentColor, fontSize: 14, fontWeight: FontWeight.w500),
      bodySmall: TextStyle(color: primaryColor.withOpacity(0.6), fontSize: 12, fontWeight: FontWeight.w400),
      labelSmall: TextStyle(color: primaryColor.withOpacity(0.6), fontSize: 10, fontWeight: FontWeight.w400),
    ),
    buttonTheme: const ButtonThemeData(
      buttonColor: primaryColor,
      textTheme: ButtonTextTheme.primary,
    ),
    floatingActionButtonTheme: const FloatingActionButtonThemeData(
      backgroundColor: primaryColor,
      foregroundColor: accentColor,
    ),
  );

  static final ThemeData darkTheme = ThemeData(
    primaryColor: accentColor,
    colorScheme: const ColorScheme.dark(
      primary: accentColor,
      secondary: primaryColor,
      surface: Color(0xFF121212),
      error: _errorColor,
    ),
    scaffoldBackgroundColor: const Color(0xFF121212),
    appBarTheme: const AppBarTheme(
      color: Color(0xFF121212),
      elevation: 0,
      iconTheme: IconThemeData(color: accentColor),
      titleTextStyle: TextStyle(color: accentColor, fontSize: 20, fontWeight: FontWeight.w500),
    ),
    iconTheme: const IconThemeData(color: accentColor),
    textTheme: TextTheme(
      displayLarge: const TextStyle(color: accentColor, fontSize: 96, fontWeight: FontWeight.w300),
      displayMedium: const TextStyle(color: accentColor, fontSize: 60, fontWeight: FontWeight.w300),
      displaySmall: const TextStyle(color: accentColor, fontSize: 48, fontWeight: FontWeight.w400),
      headlineMedium: const TextStyle(color: accentColor, fontSize: 34, fontWeight: FontWeight.w400),
      headlineSmall: const TextStyle(color: accentColor, fontSize: 24, fontWeight: FontWeight.w400),
      titleLarge: const TextStyle(color: accentColor, fontSize: 20, fontWeight: FontWeight.w500),
      titleMedium: const TextStyle(color: accentColor, fontSize: 16, fontWeight: FontWeight.w400),
      titleSmall: const TextStyle(color: accentColor, fontSize: 14, fontWeight: FontWeight.w500),
      bodyLarge: const TextStyle(color: accentColor, fontSize: 16, fontWeight: FontWeight.w400),
      bodyMedium: const TextStyle(color: accentColor, fontSize: 14, fontWeight: FontWeight.w400),
      labelLarge: const TextStyle(color: primaryColor, fontSize: 14, fontWeight: FontWeight.w500),
      bodySmall: TextStyle(color: accentColor.withOpacity(0.6), fontSize: 12, fontWeight: FontWeight.w400),
      labelSmall: TextStyle(color: accentColor.withOpacity(0.6), fontSize: 10, fontWeight: FontWeight.w400),
    ),
    buttonTheme: const ButtonThemeData(
      buttonColor: accentColor,
      textTheme: ButtonTextTheme.primary,
    ),
    floatingActionButtonTheme: const FloatingActionButtonThemeData(
      backgroundColor: accentColor,
      foregroundColor: primaryColor,
    ),
  );
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\utils\constants.dart
import 'package:flutter/material.dart';

class AppConstants {
  // Add any app-wide constants here
  static const String appName = 'Shift Calendar';
  static const String version = '1.0.0';
}

class AppColors {
  static const Color primaryColor = Colors.blue;
  static const Color accentColor = Colors.blueAccent;
  // Add more color constants as needed
}

class AppTextStyles {
  static const TextStyle headerStyle = TextStyle(fontSize: 24, fontWeight: FontWeight.bold);
  static const TextStyle subHeaderStyle = TextStyle(fontSize: 18, fontWeight: FontWeight.w500);
  // Add more text style constants as needed
}

class AppSizes {
  static const double paddingSmall = 8.0;
  static const double paddingMedium = 16.0;
  static const double paddingLarge = 24.0;
  // Add more size constants as needed
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\utils\error_handler.dart
import 'package:firebase_auth/firebase_auth.dart';

class ErrorHandler {
  static String handleAuthError(FirebaseAuthException e) {
    switch (e.code) {
      case 'user-not-found':
        return 'No user found for that email.';
      case 'wrong-password':
        return 'Wrong password provided for that user.';
      case 'email-already-in-use':
        return 'The account already exists for that email.';
      // Add more cases as needed
      default:
        return 'An error occurred: ${e.message}';
    }
  }

  static String handleFirestoreError(dynamic e) {
    // Add specific Firestore error handling if needed
    return 'A database error occurred: $e';
  }

  static String handleGeneralError(dynamic e) {
    return 'An unexpected error occurred: $e';
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\widgets\employee_dialog.dart
import 'package:flutter/material.dart';
import '../models/employee.dart';
import '../utils/app_theme.dart';

class EmployeeDialog extends StatefulWidget {
  final Employee? employee;
  final Function(Employee) onSave;

  const EmployeeDialog({super.key, this.employee, required this.onSave});

  @override
  _EmployeeDialogState createState() => _EmployeeDialogState();
}

class _EmployeeDialogState extends State<EmployeeDialog> {
  late TextEditingController _nameController;
  late TextEditingController _positionController;
  late TextEditingController _emailController;
  late TextEditingController _phoneController;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.employee?.name ?? '');
    _positionController = TextEditingController(text: widget.employee?.position ?? '');
    _emailController = TextEditingController(text: widget.employee?.email ?? '');
    _phoneController = TextEditingController(text: widget.employee?.phoneNumber ?? '');
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(
        widget.employee == null ? 'Add Employee' : 'Edit Employee',
        style: const TextStyle(fontWeight: FontWeight.w300),
      ),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildTextField(_nameController, 'Name'),
            _buildTextField(_positionController, 'Position'),
            _buildTextField(_emailController, 'Email', TextInputType.emailAddress),
            _buildTextField(_phoneController, 'Phone Number', TextInputType.phone),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: const Text('Cancel', style: TextStyle(color: AppTheme.accentColor)),
          onPressed: () => Navigator.of(context).pop(),
        ),
        ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppTheme.primaryColor,
            foregroundColor: AppTheme.accentColor,
            elevation: 0,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(4),
            ),
          ),
          onPressed: () {
            final employee = Employee(
              id: widget.employee?.id ?? '',
              name: _nameController.text,
              position: _positionController.text,
              email: _emailController.text,
              phoneNumber: _phoneController.text,
            );
            widget.onSave(employee);
            Navigator.of(context).pop();
          },
          child: Text('Save'),
        ),
      ],
    );
  }

  Widget _buildTextField(TextEditingController controller, String label, [TextInputType? keyboardType]) {
    return TextField(
      controller: controller,
      decoration: InputDecoration(
        labelText: label,
        labelStyle: TextStyle(color: AppTheme.primaryColor.withOpacity(0.6)),
        focusedBorder: const UnderlineInputBorder(
          borderSide: BorderSide(color: AppTheme.primaryColor),
        ),
      ),
      keyboardType: keyboardType,
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    _positionController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    super.dispose();
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\widgets\shift_dialog.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/shift_period.dart';
import '../models/shift.dart';
import '../providers/employee_provider.dart';

class ShiftDialog extends StatefulWidget {
  final Shift? shift;
  final List<ShiftPeriod> shiftPeriods;
  final Function(String, TimeOfDay, TimeOfDay, String, String) onSave;

  const ShiftDialog({super.key, 
    this.shift,
    required this.shiftPeriods,
    required this.onSave,
  });

  @override
  _ShiftDialogState createState() => _ShiftDialogState();
}

class _ShiftDialogState extends State<ShiftDialog> {
  late TextEditingController _titleController;
  ShiftPeriod? _selectedPeriod;
  String? _selectedEmployeeId;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController(text: widget.shift?.title ?? '');
    _selectedEmployeeId = widget.shift?.employeeId;
    if (widget.shift != null) {
      _selectedPeriod = widget.shiftPeriods.firstWhere(
        (period) => period.id == widget.shift!.shiftPeriodId,
        orElse: () => widget.shiftPeriods.first,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.shift == null ? 'Add Shift' : 'Edit Shift'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            DropdownButtonFormField<ShiftPeriod>(
              value: _selectedPeriod,
              hint: const Text('Select Shift Period'),
              isExpanded: true,
              items: widget.shiftPeriods.map((ShiftPeriod period) {
                return DropdownMenuItem<ShiftPeriod>(
                  value: period,
                  child: Text('${period.name} (${period.startTime.format(context)} - ${period.endTime.format(context)})'),
                );
              }).toList(),
              onChanged: (ShiftPeriod? newValue) {
                if (newValue != null) {
                  setState(() {
                    _selectedPeriod = newValue;
                    _titleController.text = newValue.name;
                  });
                }
              },
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _titleController,
              decoration: const InputDecoration(labelText: 'Shift Title'),
            ),
            const SizedBox(height: 16),
            Consumer<EmployeeProvider>(
              builder: (context, employeeProvider, child) {
                return DropdownButtonFormField<String>(
                  value: _selectedEmployeeId,
                  hint: const Text('Select Employee'),
                  isExpanded: true,
                  items: employeeProvider.employees.map((employee) {
                    return DropdownMenuItem<String>(
                      value: employee.id,
                      child: Text(employee.name),
                    );
                  }).toList(),
                  onChanged: (String? newValue) {
                    setState(() {
                      _selectedEmployeeId = newValue;
                    });
                  },
                );
              },
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: const Text('Cancel'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        TextButton(
          child: const Text('Save'),
          onPressed: () {
            if (_selectedPeriod != null && _selectedEmployeeId != null) {
              widget.onSave(
                _titleController.text,
                _selectedPeriod!.startTime,
                _selectedPeriod!.endTime,
                _selectedEmployeeId!,
                _selectedPeriod!.id!,
              );
              Navigator.of(context).pop();
            } else {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Please select a shift period and an employee')),
              );
            }
          },
        ),
      ],
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }
}


C:\Users\exidiful\dotfillles\user\projects\shift_manager\lib\widgets\shift_period_dialog.dart
import 'package:flutter/material.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import '../models/shift_period.dart';
import '../models/team.dart';
import '../utils/app_theme.dart';

class ShiftPeriodDialog extends StatefulWidget {
  final ShiftPeriod? shiftPeriod;
  final List<Team> teams;
  final Function(String, TimeOfDay, TimeOfDay, Color, String) onSave;

  const ShiftPeriodDialog({super.key, 
    this.shiftPeriod,
    required this.teams,
    required this.onSave,
  });

  @override
  _ShiftPeriodDialogState createState() => _ShiftPeriodDialogState();
}

class _ShiftPeriodDialogState extends State<ShiftPeriodDialog> {
  late TextEditingController _nameController;
  late TimeOfDay _startTime;
  late TimeOfDay _endTime;
  late Color _color;
  String? _selectedTeamId;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.shiftPeriod?.name ?? '');
    _startTime = widget.shiftPeriod?.startTime ?? const TimeOfDay(hour: 9, minute: 0);
    _endTime = widget.shiftPeriod?.endTime ?? const TimeOfDay(hour: 17, minute: 0);
    _color = widget.shiftPeriod?.color ?? Colors.blue;
    _selectedTeamId = widget.shiftPeriod?.teamId;
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.shiftPeriod == null ? 'Add Shift Period' : 'Edit Shift Period'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Period Name'),
            ),
            const SizedBox(height: 16),
            _buildTimePicker('Start Time', _startTime, (time) => setState(() => _startTime = time)),
            _buildTimePicker('End Time', _endTime, (time) => setState(() => _endTime = time)),
            const SizedBox(height: 16),
            _buildColorPicker(),
            const SizedBox(height: 16),
            _buildTeamDropdown(),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: const Text('Cancel'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppTheme.primaryColor,
            foregroundColor: AppTheme.accentColor,
          ),
          onPressed: () {
            if (_selectedTeamId != null) {
              widget.onSave(
                _nameController.text,
                _startTime,
                _endTime,
                _color,
                _selectedTeamId!,
              );
              Navigator.of(context).pop();
            } else {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Please select a team')),
              );
            }
          },
          child: Text('Save'),
        ),
      ],
    );
  }

  Widget _buildTimePicker(String label, TimeOfDay time, Function(TimeOfDay) onChanged) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label),
        TextButton(
          child: Text(time.format(context)),
          onPressed: () async {
            final TimeOfDay? picked = await showTimePicker(
              context: context,
              initialTime: time,
            );
            if (picked != null) {
              onChanged(picked);
            }
          },
        ),
      ],
    );
  }

  Widget _buildColorPicker() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        const Text('Color'),
        GestureDetector(
          onTap: () {
            showDialog(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  title: const Text('Pick a color'),
                  content: SingleChildScrollView(
                    child: ColorPicker(
                      pickerColor: _color,
                      onColorChanged: (Color color) {
                        setState(() => _color = color);
                      },
                      showLabel: true,
                      pickerAreaHeightPercent: 0.8,
                    ),
                  ),
                  actions: <Widget>[
                    TextButton(
                      child: const Text('OK'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                  ],
                );
              },
            );
          },
          child: Container(
            width: 40,
            height: 40,
            decoration: BoxDecoration(
              color: _color,
              shape: BoxShape.circle,
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTeamDropdown() {
    return DropdownButtonFormField<String>(
      value: _selectedTeamId,
      hint: const Text('Select Team'),
      items: widget.teams.map((Team team) {
        return DropdownMenuItem<String>(
          value: team.id,
          child: Text(team.name),
        );
      }).toList(),
      onChanged: (String? newValue) {
        setState(() {
          _selectedTeamId = newValue;
        });
      },
      decoration: const InputDecoration(labelText: 'Team'),
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    super.dispose();
  }
}


