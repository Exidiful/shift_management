import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'models.dart';
import 'models/employee.dart';
import 'models/team.dart';
import 'providers/employee_provider.dart';
import 'providers/team_provider.dart';

class EmployeeManagementPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Employee & Team Management'),
          bottom: TabBar(
            tabs: [
              Tab(text: 'Employees'),
              Tab(text: 'Teams'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            EmployeeListView(),
            TeamListView(),
          ],
        ),
        floatingActionButton: Builder(
          builder: (context) => FloatingActionButton(
            child: Icon(Icons.add),
            onPressed: () {
              if (DefaultTabController.of(context).index == 0) {
                _addEmployee(context);
              } else {
                _addTeam(context);
              }
            },
          ),
        ),
      ),
    );
  }

  void _addEmployee(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => EmployeeDialog(
        onSave: (employee) {
          Provider.of<EmployeeProvider>(context, listen: false).addEmployee(employee);
        },
      ),
    );
  }

  void _addTeam(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => TeamDialog(
        onSave: (team) {
          Provider.of<TeamProvider>(context, listen: false).addTeam(team);
        },
      ),
    );
  }
}

class EmployeeListView extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Consumer<EmployeeProvider>(
      builder: (context, employeeProvider, child) {
        return ListView.builder(
          itemCount: employeeProvider.employees.length,
          itemBuilder: (context, index) {
            final employee = employeeProvider.employees[index];
            return ListTile(
              title: Text(employee.name),
              subtitle: Text(employee.position),
              trailing: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: Icon(Icons.edit),
                    onPressed: () => _editEmployee(context, employee),
                  ),
                  IconButton(
                    icon: Icon(Icons.delete),
                    onPressed: () => _deleteEmployee(context, employee),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  void _editEmployee(BuildContext context, Employee employee) {
    showDialog(
      context: context,
      builder: (context) => EmployeeDialog(
        employee: employee,
        onSave: (updatedEmployee) {
          Provider.of<EmployeeProvider>(context, listen: false).updateEmployee(updatedEmployee);
        },
      ),
    );
  }

  void _deleteEmployee(BuildContext context, Employee employee) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Delete Employee'),
        content: Text('Are you sure you want to delete ${employee.name}?'),
        actions: [
          TextButton(
            child: Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: Text('Delete'),
            onPressed: () {
              Provider.of<EmployeeProvider>(context, listen: false).deleteEmployee(employee);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}

class TeamListView extends StatefulWidget {
  @override
  _TeamListViewState createState() => _TeamListViewState();
}

class _TeamListViewState extends State<TeamListView> {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      Provider.of<TeamProvider>(context, listen: false).fetchTeams();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Consumer2<TeamProvider, EmployeeProvider>(
      builder: (context, teamProvider, employeeProvider, child) {
        if (teamProvider.teams.isEmpty) {
          return Center(child: CircularProgressIndicator());
        }
        return ListView.builder(
          itemCount: teamProvider.teams.length,
          itemBuilder: (context, index) {
            final team = teamProvider.teams[index];
            final manager = employeeProvider.employees.firstWhere(
              (e) => e.id == team.managerId,
              orElse: () => Employee(id: '', name: 'No Manager', position: '', phoneNumber: '', email: ''),
            );
            final teamMembers = employeeProvider.employees.where((e) => team.employeeIds.contains(e.id)).toList();
            return ExpansionTile(
              title: Text(team.name),
              subtitle: Text(team.description),
              children: [
                ListTile(
                  title: Text('Manager: ${manager.name}'),
                  trailing: IconButton(
                    icon: Icon(Icons.edit),
                    onPressed: () => _assignManager(context, team),
                  ),
                ),
                ...teamMembers.map((e) => ListTile(
                      title: Text(e.name),
                      subtitle: Text(e.position),
                      trailing: IconButton(
                        icon: Icon(Icons.remove),
                        onPressed: () => _removeEmployeeFromTeam(context, team, e),
                      ),
                    )),
                ListTile(
                  title: Text('Add Team Member'),
                  trailing: IconButton(
                    icon: Icon(Icons.add),
                    onPressed: () => _addEmployeeToTeam(context, team),
                  ),
                ),
              ],
              trailing: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  IconButton(
                    icon: Icon(Icons.edit),
                    onPressed: () => _editTeam(context, team),
                  ),
                  IconButton(
                    icon: Icon(Icons.delete),
                    onPressed: () => _deleteTeam(context, team),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  void _editTeam(BuildContext context, Team team) {
    showDialog(
      context: context,
      builder: (context) => TeamDialog(
        team: team,
        onSave: (updatedTeam) {
          Provider.of<TeamProvider>(context, listen: false).updateTeam(updatedTeam);
        },
      ),
    );
  }

  void _deleteTeam(BuildContext context, Team team) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Delete Team'),
        content: Text('Are you sure you want to delete ${team.name}?'),
        actions: [
          TextButton(
            child: Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: Text('Delete'),
            onPressed: () {
              Provider.of<TeamProvider>(context, listen: false).deleteTeam(team);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }

  void _assignManager(BuildContext context, Team team) {
    showDialog(
      context: context,
      builder: (context) => AssignManagerDialog(
        team: team,
        onAssign: (managerId) {
          final updatedTeam = Team(
            id: team.id,
            name: team.name,
            description: team.description,
            employeeIds: team.employeeIds,
            managerId: managerId,
          );
          Provider.of<TeamProvider>(context, listen: false).updateTeam(updatedTeam);
        },
      ),
    );
  }

  void _addEmployeeToTeam(BuildContext context, Team team) {
    showDialog(
      context: context,
      builder: (context) => AddEmployeeToTeamDialog(
        team: team,
        onAdd: (employeeId) {
          final updatedTeam = Team(
            id: team.id,
            name: team.name,
            description: team.description,
            employeeIds: [...team.employeeIds, employeeId],
            managerId: team.managerId,
          );
          Provider.of<TeamProvider>(context, listen: false).updateTeam(updatedTeam);
        },
      ),
    );
  }

  void _removeEmployeeFromTeam(BuildContext context, Team team, Employee employee) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Remove Employee from Team'),
        content: Text('Are you sure you want to remove ${employee.name} from ${team.name}?'),
        actions: [
          TextButton(
            child: Text('Cancel'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: Text('Remove'),
            onPressed: () {
              final updatedTeam = Team(
                id: team.id,
                name: team.name,
                description: team.description,
                employeeIds: team.employeeIds.where((id) => id != employee.id).toList(),
                managerId: team.managerId,
              );
              Provider.of<TeamProvider>(context, listen: false).updateTeam(updatedTeam);
              Navigator.of(context).pop();
            },
          ),
        ],
      ),
    );
  }
}

class EmployeeDialog extends StatefulWidget {
  final Employee? employee;
  final Function(Employee) onSave;

  EmployeeDialog({this.employee, required this.onSave});

  @override
  _EmployeeDialogState createState() => _EmployeeDialogState();
}

class _EmployeeDialogState extends State<EmployeeDialog> {
  late TextEditingController _nameController;
  late TextEditingController _positionController;
  late TextEditingController _emailController;
  late TextEditingController _phoneController;
  String? _selectedTeamId;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.employee?.name ?? '');
    _positionController = TextEditingController(text: widget.employee?.position ?? '');
    _emailController = TextEditingController(text: widget.employee?.email ?? '');
    _phoneController = TextEditingController(text: widget.employee?.phoneNumber ?? '');
    _selectedTeamId = widget.employee?.teamId;
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.employee == null ? 'Add Employee' : 'Edit Employee'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: _positionController,
              decoration: InputDecoration(labelText: 'Position'),
            ),
            TextField(
              controller: _emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: _phoneController,
              decoration: InputDecoration(labelText: 'Phone Number'),
            ),
            Consumer<TeamProvider>(
              builder: (context, teamProvider, child) {
                return DropdownButtonFormField<String>(
                  value: _selectedTeamId,
                  items: [
                    DropdownMenuItem<String>(
                      value: null,
                      child: Text('No Team'),
                    ),
                    ...teamProvider.teams.map((team) {
                      return DropdownMenuItem<String>(
                        value: team.id,
                        child: Text(team.name),
                      );
                    }).toList(),
                  ],
                  onChanged: (value) {
                    setState(() {
                      _selectedTeamId = value;
                    });
                  },
                  decoration: InputDecoration(labelText: 'Team'),
                );
              },
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: Text('Cancel'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        TextButton(
          child: Text('Save'),
          onPressed: () {
            final employee = Employee(
              id: widget.employee?.id ?? '',
              name: _nameController.text,
              position: _positionController.text,
              email: _emailController.text,
              phoneNumber: _phoneController.text,
              teamId: _selectedTeamId,
            );
            widget.onSave(employee);
            Navigator.of(context).pop();
          },
        ),
      ],
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    _positionController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    super.dispose();
  }
}

class TeamDialog extends StatefulWidget {
  final Team? team;
  final Function(Team) onSave;

  TeamDialog({this.team, required this.onSave});

  @override
  _TeamDialogState createState() => _TeamDialogState();
}

class _TeamDialogState extends State<TeamDialog> {
  late TextEditingController _nameController;
  late TextEditingController _descriptionController;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.team?.name ?? '');
    _descriptionController = TextEditingController(text: widget.team?.description ?? '');
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(widget.team == null ? 'Add Team' : 'Edit Team'),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: _nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: _descriptionController,
              decoration: InputDecoration(labelText: 'Description'),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          child: Text('Cancel'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        TextButton(
          child: Text('Save'),
          onPressed: () {
            final team = Team(
              id: widget.team?.id ?? '', // Use empty string for new teams
              name: _nameController.text,
              description: _descriptionController.text,
              employeeIds: widget.team?.employeeIds ?? [],
              managerId: widget.team?.managerId,
            );
            widget.onSave(team);
            Navigator.of(context).pop();
          },
        ),
      ],
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }
}

class AssignManagerDialog extends StatefulWidget {
  final Team team;
  final Function(String?) onAssign;

  AssignManagerDialog({required this.team, required this.onAssign});

  @override
  _AssignManagerDialogState createState() => _AssignManagerDialogState();
}

class _AssignManagerDialogState extends State<AssignManagerDialog> {
  String? _selectedManagerId;

  @override
  void initState() {
    super.initState();
    _selectedManagerId = widget.team.managerId;
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Assign Manager'),
      content: Consumer<EmployeeProvider>(
        builder: (context, employeeProvider, child) {
          return DropdownButtonFormField<String>(
            value: _selectedManagerId,
            items: [
              DropdownMenuItem<String>(
                value: null,
                child: Text('No Manager'),
              ),
              ...employeeProvider.employees.map((employee) {
                return DropdownMenuItem<String>(
                  value: employee.id,
                  child: Text(employee.name),
                );
              }).toList(),
            ],
            onChanged: (value) {
              setState(() {
                _selectedManagerId = value;
              });
            },
            decoration: InputDecoration(labelText: 'Manager'),
          );
        },
      ),
      actions: [
        TextButton(
          child: Text('Cancel'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        TextButton(
          child: Text('Assign'),
          onPressed: () {
            widget.onAssign(_selectedManagerId);
            Navigator.of(context).pop();
          },
        ),
      ],
    );
  }
}

class AddEmployeeToTeamDialog extends StatefulWidget {
  final Team team;
  final Function(String) onAdd;

  AddEmployeeToTeamDialog({required this.team, required this.onAdd});

  @override
  _AddEmployeeToTeamDialogState createState() => _AddEmployeeToTeamDialogState();
}

class _AddEmployeeToTeamDialogState extends State<AddEmployeeToTeamDialog> {
  String? _selectedEmployeeId;

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Add Employee to Team'),
      content: Consumer<EmployeeProvider>(
        builder: (context, employeeProvider, child) {
          final availableEmployees = employeeProvider.employees
              .where((e) => !widget.team.employeeIds.contains(e.id))
              .toList();
          return DropdownButtonFormField<String>(
            value: _selectedEmployeeId,
            items: availableEmployees.map((employee) {
              return DropdownMenuItem<String>(
                value: employee.id,
                child: Text(employee.name),
              );
            }).toList(),
            onChanged: (value) {
              setState(() {
                _selectedEmployeeId = value;
              });
            },
            decoration: InputDecoration(labelText: 'Employee'),
          );
        },
      ),
      actions: [
        TextButton(
          child: Text('Cancel'),
          onPressed: () => Navigator.of(context).pop(),
        ),
        TextButton(
          child: Text('Add'),
          onPressed: () {
            if (_selectedEmployeeId != null) {
              widget.onAdd(_selectedEmployeeId!);
              Navigator.of(context).pop();
            }
          },
        ),
      ],
    );
  }
}